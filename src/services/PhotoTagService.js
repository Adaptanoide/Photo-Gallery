// src/services/PhotoTagService.js

const mongoose = require('mongoose');
const UnifiedProductComplete = require('../models/UnifiedProductComplete');

class PhotoTagService {

    // ===== CONFIGURA√á√ïES =====
    static USE_VIRTUAL_SYSTEM = true;

    /**
     * Reservar fotos usando TAGS (sem mover fisicamente)
     */
    static async reservePhotos(photoIds, selectionId, clientCode) {
        console.log(`üè∑Ô∏è [TAG SYSTEM] Reservando ${photoIds.length} fotos para ${clientCode}`);

        try {
            const photoResult = await UnifiedProductComplete.updateMany(
                {
                    photoId: { $in: photoIds },
                    status: 'available'
                },
                {
                    $set: {
                        status: 'reserved',
                        selectionId: selectionId,
                        'reservedBy.clientCode': clientCode
                    }
                }
            );

            console.log(`‚úÖ [TAG SYSTEM] ${photoResult.modifiedCount} fotos marcadas como reservadas`);
            console.log(`‚úÖ [TAG SYSTEM] SEM MOVIMENTA√á√ÉO F√çSICA!`);

            return {
                success: true,
                photosTagged: photoResult.modifiedCount
            };

        } catch (error) {
            console.error('‚ùå [TAG SYSTEM] Erro ao reservar fotos:', error);
            throw error;
        }
    }

    /**
     * Aprovar sele√ß√£o (marcar como vendida)
     */
    static async approveSelection(selectionId) {
        console.log(`üè∑Ô∏è [TAG SYSTEM] Aprovando sele√ß√£o ${selectionId}`);

        try {
            const photos = await UnifiedProductComplete.find({
                selectionId: selectionId
            });

            const photoIds = photos.map(p => p.photoId);

            const photoResult = await UnifiedProductComplete.updateMany(
                { selectionId: selectionId },
                {
                    $set: {
                        status: 'sold'
                    }
                }
            );

            console.log(`‚úÖ [TAG SYSTEM] ${photoResult.modifiedCount} fotos marcadas como vendidas`);
            console.log(`‚úÖ [TAG SYSTEM] SEM MOVIMENTA√á√ÉO F√çSICA!`);

            return {
                success: true,
                photosTagged: photoResult.modifiedCount
            };

        } catch (error) {
            console.error('‚ùå [TAG SYSTEM] Erro ao aprovar sele√ß√£o:', error);
            throw error;
        }
    }

    /**
     * Cancelar sele√ß√£o (voltar para dispon√≠vel)
     */
    static async cancelSelection(selectionId) {
        console.log(`üè∑Ô∏è [TAG SYSTEM] Cancelando sele√ß√£o ${selectionId}`);

        try {
            const photos = await UnifiedProductComplete.find({
                selectionId: selectionId
            });

            const photoIds = photos.map(p => p.photoId);

            const photoResult = await UnifiedProductComplete.updateMany(
                { selectionId: selectionId },
                {
                    $set: {
                        status: 'available',
                        selectionId: null,
                        'reservedBy.clientCode': null
                    }
                }
            );

            console.log(`‚úÖ [TAG SYSTEM] ${photoResult.modifiedCount} fotos voltaram para dispon√≠vel`);
            console.log(`‚úÖ [TAG SYSTEM] SEM REVERS√ÉO F√çSICA!`);

            return {
                success: true,
                photosTagged: photoResult.modifiedCount
            };

        } catch (error) {
            console.error('‚ùå [TAG SYSTEM] Erro ao cancelar sele√ß√£o:', error);
            throw error;
        }
    }

    /**
     * Migrar dados existentes para sistema de tags
     * NOTA: Este m√©todo n√£o √© mais necess√°rio pois removemos virtualStatus
     */
    static async migrateExistingData() {
        console.log('üîÑ Migra√ß√£o n√£o necess√°ria - sistema simplificado');
        
        return {
            success: true,
            total: 0,
            migrated: 0,
            message: 'Sistema simplificado n√£o requer migra√ß√£o'
        };
    }
}

module.exports = PhotoTagService;