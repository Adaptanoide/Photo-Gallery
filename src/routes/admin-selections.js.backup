//src/routes/admin-selections.js

const express = require('express');
const mongoose = require('mongoose');
const Selection = require('../models/Selection');
const Product = require('../models/Product');
// const GoogleDriveService = require('../services/GoogleDriveService'); // DESABILITADO - R2
const PhotoTagService = require('../services/PhotoTagService');
const { authenticateToken } = require('./auth');
const router = express.Router();

// Autentica√ß√£o obrigat√≥ria para todas as rotas
router.use(authenticateToken);

/**
 * GET /api/selections
 * Listar todas as sele√ß√µes pending para admin
 */
router.get('/', async (req, res) => {
    try {
        const { status = 'pending', page = 1, limit = 50 } = req.query;

        // ‚úÖ CORRE√á√ÉO: Tratar "All Status"
        let query = {};
        if (status && status !== 'all') {
            query.status = status;
        }

        // ‚úÖ NOVA L√ìGICA: Selection Management S√ì v√™ sele√ß√µes que CLIENTE processou
        query.$or = [
            // Sele√ß√µes normais (sempre mostrar)
            { selectionType: { $ne: 'special' } },
            // Sele√ß√µes especiais S√ì se cliente finalizou (n√£o admin actions)
            {
                selectionType: 'special',
                status: { $in: ['pending', 'finalized', 'cancelled'] },
                // E que n√£o foram canceladas apenas pelo admin
                'movementLog.action': 'finalized'
            }
        ];

        // Se status for 'all', query fica vazio = busca TODAS as sele√ß√µes

        const selections = await Selection.find(query)
            .sort({ createdAt: -1 })
            .limit(limit * 1)
            .skip((page - 1) * limit)
            .populate('items.productId');

        const total = await Selection.countDocuments(query);

        res.json({
            success: true,
            selections: selections.map(s => ({
                selectionId: s.selectionId,
                clientCode: s.clientCode,
                clientName: s.clientName,
                totalItems: s.totalItems,
                totalValue: s.totalValue,
                status: s.status,
                createdAt: s.createdAt,
                reservationExpiredAt: s.reservationExpiredAt,
                isExpired: s.isExpired(),
                googleDriveInfo: s.googleDriveInfo
            })),
            pagination: {
                total,
                page: parseInt(page),
                totalPages: Math.ceil(total / limit),
                hasNext: page * limit < total
            }
        });

    } catch (error) {
        console.error('‚ùå Erro ao listar sele√ß√µes:', error);
        res.status(500).json({
            success: false,
            message: 'Erro ao carregar sele√ß√µes',
            error: error.message
        });
    }
});

/**
 * GET /api/selections/stats
 * Estat√≠sticas COMPLETAS (normal + special selections)
 */
router.get('/stats', async (req, res) => {
    try {
        console.log('üìä Carregando estat√≠sticas completas...');
        // ‚úÖ USAR MESMA L√ìGICA: S√ì sele√ß√µes que cliente processou
        const query = {};
        query.$or = [
            { selectionType: { $ne: 'special' } },
            {
                selectionType: 'special',
                status: { $in: ['pending', 'finalized', 'cancelled'] },
                'movementLog.action': 'finalized'
            }
        ];

        const totalSelections = await Selection.countDocuments(query);
        const pendingQuery = { ...query, status: { $in: ['pending'] } };
        const pendingSelections = await Selection.countDocuments(pendingQuery);

        // Sele√ß√µes deste m√™s
        const startOfMonth = new Date();
        startOfMonth.setDate(1);
        startOfMonth.setHours(0, 0, 0, 0);

        const thisMonthSelections = await Selection.countDocuments({
            createdAt: { $gte: startOfMonth }
        });

        // Valor m√©dio
        const avgResult = await Selection.aggregate([
            { $group: { _id: null, avg: { $avg: '$totalValue' } } }
        ]);
        const averageValue = avgResult[0]?.avg || 0;

        res.json({
            success: true,
            stats: {
                totalSelections,
                pendingSelections,
                thisMonthSelections,
                averageValue
            }
        });

    } catch (error) {
        console.error('‚ùå Erro ao carregar estat√≠sticas:', error);
        res.status(500).json({
            success: false,
            message: 'Erro ao carregar estat√≠sticas'
        });
    }
});

/**
 * POST /api/selections/:selectionId/approve
 * Aprovar sele√ß√£o - mover para SYSTEM_SOLD e marcar produtos como 'sold'
 */
router.post('/:selectionId/approve', async (req, res) => {
    const session = await mongoose.startSession();

    try {
        return await session.withTransaction(async () => {
            const { selectionId } = req.params;
            const { adminUser, notes } = req.body;

            console.log(`‚úÖ Aprovando sele√ß√£o ${selectionId}...`);

            // 1. Buscar sele√ß√£o
            const selection = await Selection.findOne({ selectionId }).session(session);

            if (!selection) {
                return res.status(404).json({
                    success: false,
                    message: 'Sele√ß√£o n√£o encontrada'
                });
            }

            if (selection.status !== 'pending') {
                return res.status(400).json({
                    success: false,
                    message: 'Apenas sele√ß√µes pendentes podem ser aprovadas'
                });
            }

            // ========= IN√çCIO DO C√ìDIGO NOVO =========
            // NOVO: Marcar como approving ANTES de processar
            selection.status = 'approving';
            selection.processStatus = {
                active: true,
                type: 'approving',
                message: `Approving selection...`,
                totalItems: selection.items.length,
                startedAt: new Date()
            };
            await selection.save({ session });

            console.log('üìä Status atualizado para APPROVING');
            // ========= FIM DO C√ìDIGO NOVO =========

            // 2. SISTEMA DE TAGS: Marcar fotos como vendidas (SEM MOVER!)
            console.log('üè∑Ô∏è [TAGS] Marcando fotos como vendidas...');

            // Buscar IDs das fotos do Google Drive
            const driveFileIds = selection.items.map(item => item.driveFileId);

            // Usar PhotoTagService para marcar como sold
            const tagResult = await PhotoTagService.approveSelection('TEMP_1755710291299');

            console.log(`‚úÖ [TAGS] ${tagResult.photosTagged} fotos marcadas como SOLD`);
            console.log('üìÅ [TAGS] Nenhuma movimenta√ß√£o f√≠sica realizada!');

            // Criar objeto moveResult fake para compatibilidade
            const moveResult = {
                success: true,
                finalFolderId: selection.googleDriveInfo.clientFolderId,
                finalFolderName: selection.googleDriveInfo.clientFolderName
            };

            // 3. Atualizar produtos: reserved_pending ‚Üí sold
            const productIds = selection.items.map(item => item.productId);

            await Product.updateMany(
                { _id: { $in: productIds } },
                {
                    $set: {
                        status: 'sold',
                        soldAt: new Date()
                    },
                    $unset: { 'reservedBy': 1 }
                }
            ).session(session);

            // 4. Atualizar sele√ß√£o
            selection.status = 'finalized';
            selection.processedBy = adminUser || 'admin';
            selection.processedAt = new Date();
            selection.finalizedAt = new Date();
            selection.adminNotes = notes || '';

            // ========= IN√çCIO DO C√ìDIGO NOVO =========
            // NOVO: Limpar processStatus ap√≥s conclus√£o
            selection.processStatus = {
                active: false
            };
            // ========= FIM DO C√ìDIGO NOVO =========

            // Atualizar info do Google Drive
            selection.googleDriveInfo.finalFolderId = moveResult.finalFolderId;

            selection.addMovementLog('approved', `Sele√ß√£o aprovada por ${adminUser || 'admin'}`);

            await selection.save({ session });

            console.log(`‚úÖ Sele√ß√£o ${selectionId} aprovada com sucesso`);

            res.json({
                success: true,
                message: 'Sele√ß√£o aprovada com sucesso',
                selection: selection.getSummary(),
                googleDrive: {
                    finalFolderName: moveResult.finalFolderName,
                    finalFolderId: moveResult.finalFolderId
                }
            });
        });

    } catch (error) {
        console.error('‚ùå Erro ao aprovar sele√ß√£o:', error);
        res.status(500).json({
            success: false,
            message: 'Erro ao aprovar sele√ß√£o',
            error: error.message
        });
    } finally {
        await session.endSession();
    }
});

/**
 * POST /api/selections/:selectionId/cancel
 * Cancelar sele√ß√£o - voltar fotos para pasta original e marcar como dispon√≠vel
 */
router.post('/:selectionId/cancel', async (req, res) => {
    const session = await mongoose.startSession();

    try {
        return await session.withTransaction(async () => {
            const { selectionId } = req.params;
            const { reason, adminUser } = req.body;

            console.log(`‚ùå Cancelando sele√ß√£o ${selectionId}...`);

            // 1. Buscar sele√ß√£o com dados completos
            const selection = await Selection.findOne({ selectionId })
                .populate('items.productId')
                .session(session);

            if (!selection) {
                return res.status(404).json({
                    success: false,
                    message: 'Sele√ß√£o n√£o encontrada'
                });
            }

            if (selection.status !== 'pending') {
                return res.status(400).json({
                    success: false,
                    message: 'Apenas sele√ß√µes pendentes podem ser canceladas'
                });
            }

            // NOVO: Marcar como cancelling ANTES de processar
            selection.status = 'cancelling';
            selection.processStatus = {
                active: true,
                type: 'cancelling',
                message: `Cancelling selection...`,
                totalItems: selection.items.length,
                startedAt: new Date()
            };
            await selection.save({ session });

            console.log('üìä Status atualizado para CANCELLING');

            // 2. SISTEMA DE TAGS: Liberar fotos (SEM MOVER!)
            console.log('üè∑Ô∏è [TAGS] Liberando fotos para dispon√≠vel...');

            // Usar PhotoTagService para cancelar sele√ß√£o
            const tagResult = await PhotoTagService.cancelSelection('TEMP_1755711675758');

            console.log(`‚úÖ [TAGS] ${tagResult.photosTagged} fotos marcadas como AVAILABLE`);
            console.log('üìÅ [TAGS] Nenhuma revers√£o f√≠sica realizada!');

            // Criar objeto revertResults fake para compatibilidade
            const revertResults = [];
            const successfulReverts = tagResult.photosTagged;
            const failedReverts = 0;

            console.log(`üè∑Ô∏è [TAGS] Cancelamento conclu√≠do: ${successfulReverts} fotos liberadas`);
            // 3. Atualizar produtos: reserved_pending ‚Üí available
            const productIds = selection.items.map(item => item.productId);

            await Product.updateMany(
                { _id: { $in: productIds } },
                {
                    $set: {
                        status: 'available'
                    },
                    $unset: {
                        'reservedBy': 1,
                        'reservedAt': 1,
                        'cartAddedAt': 1
                    }
                }
            ).session(session);

            // 4. Atualizar sele√ß√£o
            selection.status = 'cancelled';
            selection.processedBy = adminUser || 'admin';
            selection.processedAt = new Date();
            selection.adminNotes = reason || 'Cancelada pelo admin';

            // NOVO: Limpar processStatus ap√≥s conclus√£o
            selection.processStatus = {
                active: false
            };

            selection.addMovementLog('cancelled', `Sele√ß√£o cancelada por ${adminUser || 'admin'}: ${reason || 'Sem motivo especificado'}`);

            await selection.save({ session });

            // 5. Tentar limpar pasta vazia no RESERVED
            try {
                // await GoogleDriveService.cleanupEmptyFolder(selection.googleDriveInfo.clientFolderId);
            } catch (cleanupError) {
                console.warn('‚ö†Ô∏è Erro ao limpar pasta vazia:', cleanupError.message);
            }

            console.log(`‚úÖ Sele√ß√£o ${selectionId} cancelada com sucesso`);

            res.json({
                success: true,
                message: 'Sele√ß√£o cancelada com sucesso',
                selection: selection.getSummary(),
                reversion: {
                    total: revertResults.length,
                    successful: successfulReverts,
                    failed: failedReverts,
                    details: revertResults
                }
            });
        });

    } catch (error) {
        console.error('‚ùå Erro ao cancelar sele√ß√£o:', error);
        res.status(500).json({
            success: false,
            message: 'Erro ao cancelar sele√ß√£o',
            error: error.message
        });
    } finally {
        await session.endSession();
    }
});

/**
 * POST /api/selections/:selectionId/force-cancel
 * Cancelar sele√ß√£o CONFIRMADA - APENAS PARA LIMPEZA DE TESTES
 */
router.post('/:selectionId/force-cancel', async (req, res) => {
    const session = await mongoose.startSession();

    try {
        return await session.withTransaction(async () => {
            const { selectionId } = req.params;
            const { reason, adminUser, confirmText } = req.body;

            // VERIFICA√á√ÉO DE SEGURAN√áA
            if (confirmText !== 'CONFIRMO CANCELAMENTO FOR√áADO') {
                return res.status(400).json({
                    success: false,
                    message: 'Texto de confirma√ß√£o incorreto. Digite: "CONFIRMO CANCELAMENTO FOR√áADO"'
                });
            }

            console.log(`üö® CANCELAMENTO FOR√áADO da sele√ß√£o ${selectionId}...`);

            // 1. Buscar sele√ß√£o (aceita qualquer status)
            const selection = await Selection.findOne({ selectionId })
                .populate('items.productId')
                .session(session);

            if (!selection) {
                return res.status(404).json({
                    success: false,
                    message: 'Sele√ß√£o n√£o encontrada'
                });
            }

            console.log(`üìã Status atual: ${selection.status}`);

            // 2. Reverter fotos do Google Drive
            console.log('üîÑ Revertendo fotos para pastas originais (for√ßado)...');

            const revertResults = [];

            for (const item of selection.items) {
                try {
                    const originalPath = item.originalPath;

                    if (!originalPath) {
                        console.warn(`‚ö†Ô∏è Item ${item.fileName} sem originalPath - usando fallback`);
                        revertResults.push({
                            success: false,
                            fileName: item.fileName,
                            error: 'originalPath n√£o encontrado'
                        });
                        continue;
                    }

                    // Reverter foto usando GoogleDriveService (funciona com IDs antigos ou caminhos novos)
                    // const revertResult = await GoogleDriveService.revertPhotoToOriginalLocation(
                    //     item.driveFileId,

                    revertResults.push({
                        success: revertResult.success,
                        fileName: item.fileName,
                        driveFileId: item.driveFileId,
                        originalPath: originalPath,
                        method: revertResult.method || 'UNKNOWN',
                        error: revertResult.success ? null : revertResult.error
                    });

                } catch (error) {
                    console.error(`‚ùå Erro ao reverter foto ${item.fileName}:`, error);
                    revertResults.push({
                        success: false,
                        fileName: item.fileName,
                        error: error.message
                    });
                }
            }

            const successfulReverts = revertResults.filter(r => r.success).length;
            const failedReverts = revertResults.length - successfulReverts;

            console.log(`üîÑ Revers√£o for√ßada: ${successfulReverts} sucessos, ${failedReverts} falhas`);

            // 3. Atualizar produtos: qualquer status ‚Üí available
            const productIds = selection.items.map(item => item.productId);

            await Product.updateMany(
                { _id: { $in: productIds } },
                {
                    $set: {
                        status: 'available'
                    },
                    $unset: {
                        'reservedBy': 1,
                        'reservedAt': 1,
                        'cartAddedAt': 1,
                        'soldAt': 1
                    }
                }
            ).session(session);

            // 4. Atualizar sele√ß√£o
            selection.status = 'cancelled';
            selection.processedBy = adminUser || 'admin';
            selection.processedAt = new Date();
            selection.adminNotes = `CANCELAMENTO FOR√áADO: ${reason || 'Limpeza de testes'}`;

            selection.addMovementLog('cancelled', `CANCELAMENTO FOR√áADO por ${adminUser || 'admin'}: ${reason || 'Limpeza de testes'}`);
            selection.addMovementLog('photos_reverted', `${successfulReverts} fotos revertidas (for√ßado), ${failedReverts} falhas`);

            await selection.save({ session });

            // 5. Tentar limpar pastas vazias
            const foldersToClean = [
                selection.googleDriveInfo.finalFolderId,
                selection.googleDriveInfo.clientFolderId
            ].filter(Boolean);

            for (const folderId of foldersToClean) {
                try {
                    // await GoogleDriveService.cleanupEmptyFolder(folderId);
                } catch (cleanupError) {
                    console.warn(`‚ö†Ô∏è Erro ao limpar pasta ${folderId}:`, cleanupError.message);
                }
            }

            console.log(`‚úÖ CANCELAMENTO FOR√áADO de ${selectionId} conclu√≠do`);

            res.json({
                success: true,
                message: `Sele√ß√£o ${selectionId} cancelada for√ßadamente`,
                selection: selection.getSummary(),
                reversion: {
                    total: revertResults.length,
                    successful: successfulReverts,
                    failed: failedReverts,
                    details: revertResults
                },
                warning: 'Esta foi uma opera√ß√£o de cancelamento for√ßado para limpeza'
            });
        });

    } catch (error) {
        console.error('‚ùå Erro no cancelamento for√ßado:', error);
        res.status(500).json({
            success: false,
            message: 'Erro no cancelamento for√ßado',
            error: error.message
        });
    } finally {
        await session.endSession();
    }
});

module.exports = router;