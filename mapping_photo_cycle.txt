    type: Date,
    default: Date.now
  },
  categories: [{
    name: String,           // "Black & White"
    photoCount: Number,     // 45
    processedPhotos: {      // Para controle de distribuição
      type: Number,
      default: 0
    }
  }],
    folderMap.set(folder.id, {
      id: folder.id,
      name: folder.name,
      parents: folder.parents || [],
      children: [],
      fileCount: 0, // Será preenchido posteriormente
      isAll: false,
      isLeaf: true
    });
  });
  
--
    rootFolders.unshift({
      id: 'all-items',
      name: 'All Items',
      parents: [],
      children: [],
      fileCount: 0,
      isAll: true,
      isLeaf: false
    });
  }
  
        console.log(`📁 Criando pasta de destino: ${targetFolderName}`);
        targetFolder = {
          id: localStorageService.generateId(),
          name: targetFolderName,
          relativePath: targetFolderName,
          photoCount: 0,
          children: []
        };
        index.folders.push(targetFolder);
      }

--

      const folders = statusFolder.children.map(folder => ({
        id: folder.id,
        name: folder.name,
        createdTime: folder.createdTime || new Date().toISOString(),
        photoCount: folder.photoCount || 0
      }));

      console.log(`📋 Encontrados ${folders.length} pedidos em ${folderName}`);

      return { success: true, folders };
--
    }
    return result;
  }

  // Atualizar índice com informações do pedido
  async updateIndexForOrder(statusFolder, folderName, folderId, photoCount) {
    console.log(`📝 Atualizando índice para pasta: ${statusFolder}/${folderName}`);

    try {
      const index = await localStorageService.getIndex();

--
        // Criar a pasta se não existir
        parentFolder = {
          id: localStorageService.generateId(),
          name: statusFolder,
          relativePath: statusFolder,
          photoCount: 0,
          children: []
        };
        index.folders.push(parentFolder);
      }

--
      // Adicionar o pedido
      parentFolder.children.push({
        id: folderId,
        name: folderName,
        relativePath: path.join(statusFolder, folderName),
        photoCount: photoCount,
        createdTime: new Date().toISOString()
      });

      console.log(`✅ Pedido adicionado ao índice: ${folderName}`);

--
        order: {
          id: folderId,
          name: orderFolder.name,
          status: parentFolderName,
          createdTime: orderFolder.createdTime,
          photoCount: orderFolder.photoCount,
          categories: categories,
          path: orderPath
        }
      };
    } catch (error) {
--
        if (parentFolder && parentFolder.children) {
          parentFolder.children = parentFolder.children.filter(f => f.id !== folderId);
        }
      } else {
        // Atualizar contador de fotos no índice
        orderFolder.photoCount = (orderFolder.photoCount || 0) - movedPhotos;
      }

      // Salvar índice atualizado
      await localStorageService.saveIndex(index);
      //await localStorageService.rebuildIndex(); // Rebuild para atualizar contadores
--
      const index = await localStorageService.getIndex();
      let updated = false;

      // Para cada categoria que teve fotos movidas
      for (const [categoryName, photos] of Object.entries(photosByCategory)) {
        const photoCount = photos.length;
        console.log(`📉 Categoria "${categoryName}": diminuindo ${photoCount} fotos`);

        // Encontrar categoria no índice
        const category = this.findCategoryByNameInIndex(index, categoryName);
        if (category) {
          category.photoCount = Math.max(0, (category.photoCount || 0) - photoCount);
          console.log(`✅ "${categoryName}": novo contador = ${category.photoCount}`);
          updated = true;
        } else {
          console.warn(`⚠️ Categoria "${categoryName}" não encontrada no índice`);
        }
      }
      const folders = await this.getFolderStructure(true, true);
      
      // Filtrar pastas vazias se necessário
      let filteredFolders = folders;
      if (!includeEmpty) {
        filteredFolders = folders.filter(folder => folder.fileCount && folder.fileCount > 0);
      }
      
      console.log(`[LocalStorage] Returning ${filteredFolders.length} folders for admin`);
      
      return {
--
    const adminFolders = ['Waiting Payment', 'Sold', 'Developing'];
    let folders = [];

    // FUNÇÃO RECURSIVA CORRIGIDA
    const processFolder = (folderData, parentPath = []) => {
      console.log(`[DEBUG] Processing folder: ${folderData.name}, photoCount: ${folderData.photoCount}, isAdmin: ${isAdmin}`);
      
      const currentPath = [...parentPath, folderData.name];
      
      if (!isAdmin && adminFolders.includes(folderData.name)) {
        console.log(`[DEBUG] Skipping admin folder: ${folderData.name}`);
--
      }

      // CORREÇÃO: Para clientes, mostrar APENAS pastas com fotos (subpastas finais)
      if (!isAdmin) {
        // Se esta pasta tem fotos diretamente, adicionar
        if (folderData.photoCount && folderData.photoCount > 0) {
          console.log(`[DEBUG] Adding folder with photos: ${folderData.name} (${folderData.photoCount} photos)`);
          folders.push({
            id: folderData.id,
            name: folderData.name,
            path: currentPath,
            fullPath: currentPath.join(' → '),
            isAll: false,
            isLeaf: true,
            fileCount: folderData.photoCount
          });
        }
        
        // Processar filhos para encontrar mais pastas com fotos
        if (folderData.children && folderData.children.length > 0) {
--
          id: folderData.id,
          name: folderData.name,
          path: currentPath,
          fullPath: currentPath.join(' → '),
          isAll: false,
          isLeaf: folderData.photoCount > 0,
          fileCount: folderData.photoCount || 0,
          hasChildren: folderData.children && folderData.children.length > 0
        });
        
        if (folderData.children && folderData.children.length > 0) {
          folderData.children.forEach(child => {
--
      folders.unshift({
        id: 'all-items',
        name: 'All Items',
        isAll: true,
        isLeaf: false,
        fileCount: index.totalPhotos || 0
      });
    }

    console.log(`[DEBUG] Final folders count: ${folders.length}`);
    console.log(`[DEBUG] First few folders:`, folders.slice(0, 3));
--
  async getAllPhotos() {
    const photos = [];
    const index = await this.getIndex();

    const processFolder = async (folder) => {
      if (folder.photoCount > 0) {
        const categoryPhotos = await this.getPhotos(folder.id);
        photos.push(...categoryPhotos);
      }

      if (folder.children) {
--
      const items = await fs.readdir(folderPath, { withFileTypes: true });
      const folder = {
        id: this.generateId(),
        name: path.basename(folderPath),
        relativePath: relativePath,
        photoCount: 0,
        children: []
      };
      
      for (const item of items) {
        const itemPath = path.join(folderPath, item.name);
--
        
        if (item.isDirectory()) {
          const childFolder = await scanFolder(itemPath, itemRelativePath);
          folder.children.push(childFolder);
        } else if (this.isImageFile(item.name)) {
          folder.photoCount++;
          index.totalPhotos++;
        }
      }
      
      return folder;
--
  }

  async getStorageStats() {
    return {
      totalSize: 0,
      photoCount: 0,
      folderCount: 0,
      usedGB: '0',
      availableGB: '50',
      percentUsed: '0'
    };
--
      // Mostrar estrutura das primeiras 3 pastas
      if (index.folders && index.folders.length > 0) {
        index.folders.slice(0, 3).forEach((folder, i) => {
          console.log(`[DEBUG] Folder ${i + 1}:`, {
            name: folder.name,
            photoCount: folder.photoCount,
            hasChildren: folder.children ? folder.children.length : 0
          });
          
          // Mostrar primeiros filhos também
          if (folder.children && folder.children.length > 0) {
            folder.children.slice(0, 2).forEach((child, j) => {
              console.log(`  Child ${j + 1}:`, {
                name: child.name,
                photoCount: child.photoCount,
                hasChildren: child.children ? child.children.length : 0
              });
            });
          }
        });
--
      const index = await this.getIndex();
      
      // Encontrar e atualizar pasta origem
      const sourceInIndex = this.findCategoryById(index, sourceFolder.id);
      if (sourceInIndex) {
        sourceInIndex.photoCount = Math.max(0, (sourceInIndex.photoCount || 0) - movedCount);
        console.log(`📉 Source folder ${sourceFolder.name}: ${sourceInIndex.photoCount} photos remaining`);
      }
      
      // Encontrar e atualizar pasta destino
      const destinationInIndex = this.findCategoryById(index, destinationFolder.id);
      if (destinationInIndex) {
        destinationInIndex.photoCount = (destinationInIndex.photoCount || 0) + movedCount;
        console.log(`📈 Destination folder ${destinationFolder.name}: ${destinationInIndex.photoCount} photos total`);
      }
      
      // Atualizar timestamp do índice
      index.lastUpdate = new Date().toISOString();
      
--
      const index = await this.getIndex();
      
      // Encontrar e atualizar pasta no índice
      const folderInIndex = this.findCategoryById(index, sourceFolder.id);
      if (folderInIndex) {
        folderInIndex.photoCount = Math.max(0, (folderInIndex.photoCount || 0) - deletedCount);
        console.log(`📉 Folder ${sourceFolder.name}: ${folderInIndex.photoCount} photos remaining`);
      }
      
      // Atualizar total geral
      index.totalPhotos = Math.max(0, (index.totalPhotos || 0) - deletedCount);
      
      console.log(`   Total processado: ${totalProcessed}`);

      // Atualizar shipment no banco
      const categories = Object.entries(categoriesData).map(([name, files]) => ({
        name,
        photoCount: files.length,
        processedPhotos: 0
      }));

      shipment.categories = categories;
      shipment.totalPhotos = totalProcessed;
      await shipment.save();

      console.log(`✅ Upload completed: ${totalProcessed} photos in ${categories.length} categories`);
      console.log('📁 Categories found:', categories.map(c => `${c.name} (${c.photoCount} photos)`));

      res.status(200).json({
        success: true,
        processedPhotos: totalProcessed,
        categories: categories,
--
            const photoFiles = files.filter(f => f.endsWith('.webp'));

            if (photoFiles.length > 0) {
              categories.push({
                name: item.name,
                photoCount: photoFiles.length,
                photos: photoFiles.map(f => ({
                  name: f,
                  id: path.parse(f).name
                }))
              });
  // Função recursiva para procurar a foto FISICAMENTE
  const searchInFolder = async (folder, parentPath = []) => {
    const currentPath = [...parentPath, folder.name];

    // Se esta pasta tem fotos, verificar FISICAMENTE se nossa foto está aqui
    if (folder.photoCount > 0 && folder.relativePath) {
      try {
        const folderPath = path.join('/opt/render/project/storage/cache/fotos/imagens-webp', folder.relativePath);
        const photoPath = path.join(folderPath, `${photoId}.webp`);
        
        // ✅ VERIFICAR SE ARQUIVO EXISTE FISICAMENTE
--
      folderName: order.name,
      status: order.status,
      created: order.createdTime,
      categories: categories,
      comments: mongoOrder ? mongoOrder.comments : '',
      photoCount: order.photoCount
    });

  } catch (error) {
    console.error('Error getting order details:', error);
    res.status(500).json({
    
    // Converter para o formato esperado pelo frontend
    const formattedFolders = folders.map(folder => ({
      id: folder.id,
      name: folder.name,
      fileCount: folder.fileCount || 0,
      path: folder.fullPath || folder.path || folder.name
    }));
    
    res.status(200).json({
      success: true,
      if (adminFolderNames.includes(category.name)) return false;
      
      // Para clientes regulares, verificar adicionalmente:
      if (!isAdmin) {
        // MODIFICAÇÃO: Verificação mais robusta - excluir categorias sem fotos
        if (!category.fileCount || category.fileCount <= 0) {
          console.log(`Excluindo categoria ${category.name} por não conter fotos (count=${category.fileCount})`);
          return false;
        }
      }
      
      return true; // Manter outras categorias
--
    const accessFilteredCategories = filteredCategories.filter(category => {
      // Categoria "All Items" sempre habilitada
      if (category.isAll) return true;
      
      // MODIFICAÇÃO: Verificação redundante para garantir que a categoria tem arquivos
      if (!category.fileCount || category.fileCount === 0) return false;
      
      // CORREÇÃO: Se não tiver configuração específica, PERMITIR por padrão
      if (accessMap[category.id] === undefined) return true;
      
      // Usar configuração de acesso
--
        }
      } else {
        console.log(`Sem configuração de acesso para ${folder.name}, permitindo por padrão`);
      }
      
      // MODIFICADO: Verificação mais robusta para fileCount
      if (!folder.fileCount || folder.fileCount <= 0) {
        console.log(`Excluindo categoria ${folder.name} por estar vazia (fileCount=${folder.fileCount})`);
        return false;
      }
      
      // CORREÇÃO: Por padrão, permitir acesso (incluir a categoria)
      return true;
--
      name: cat.name,
      path: cat.path || [],
      fullPath: cat.fullPath || cat.name,
      isAll: false,
      isLeaf: true,
      fileCount: cat.fileCount
    }));
    
    console.log(`Total de ${categories.length} categorias sendo retornadas ao cliente`);
    
    // Retornar todos os dados combinados
