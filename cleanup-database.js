// SCRIPT DE LIMPEZA COMPLETA DO BANCO DE DADOS
// MANT√âM APENAS ADMINS - LIMPA TODO O RESTO
require('dotenv').config();
const mongoose = require('mongoose');

async function cleanupDatabase() {
    try {
        console.log('üßπ INICIANDO LIMPEZA TOTAL DO BANCO...');
        console.log('‚ö†Ô∏è  AVISO: Isto vai ZERAR o banco (exceto admins)!\n');

        // Importar TODOS os modelos
        const AccessCode = require('./src/models/AccessCode');
        const Selection = require('./src/models/Selection');
        const PhotoStatus = require('./src/models/PhotoStatus');
        const Cart = require('./src/models/Cart');
        const Product = require('./src/models/Product');
        const PhotoCategory = require('./src/models/PhotoCategory');
        const QuantityDiscount = require('./src/models/QuantityDiscount');
        const EmailConfig = require('./src/models/EmailConfig');

        // Tentar importar Sale se existir
        let Sale;
        try {
            Sale = require('./src/models/Sale');
        } catch (e) {
            console.log('üìå Modelo Sale n√£o encontrado (normal)');
        }

        // 1. LIMPAR PRODUCTS (IMPORTANTE - RESOLVE O BUG!)
        console.log('üóëÔ∏è Limpando PRODUCTS e reservas bugadas...');
        const deletedProducts = await Product.deleteMany({});
        console.log(`‚úÖ ${deletedProducts.deletedCount} produtos removidos`);

        // 2. LIMPAR CARRINHOS
        console.log('üóëÔ∏è Limpando todos os carrinhos...');
        const deletedCarts = await Cart.deleteMany({});
        console.log(`‚úÖ ${deletedCarts.deletedCount} carrinhos removidos`);

        // 3. LIMPAR SELE√á√ïES
        console.log('üóëÔ∏è Limpando todas as sele√ß√µes...');
        const deletedSelections = await Selection.deleteMany({});
        console.log(`‚úÖ ${deletedSelections.deletedCount} sele√ß√µes removidas`);

        // 4. LIMPAR CLIENTES
        console.log('üóëÔ∏è Limpando todos os clientes...');
        const deletedClients = await AccessCode.deleteMany({});
        console.log(`‚úÖ ${deletedClients.deletedCount} clientes removidos`);

        // 5. LIMPAR PHOTO STATUS
        console.log('üóëÔ∏è Limpando photo status...');
        const deletedPhotoStatus = await PhotoStatus.deleteMany({});
        console.log(`‚úÖ ${deletedPhotoStatus.deletedCount} photo status removidos`);

        // 6. LIMPAR SALES (se existir)
        if (Sale) {
            console.log('üóëÔ∏è Limpando vendas...');
            const deletedSales = await Sale.deleteMany({});
            console.log(`‚úÖ ${deletedSales.deletedCount} vendas removidas`);
        }

        // 7. LIMPAR PRE√áOS E CATEGORIAS
        console.log('üóëÔ∏è Limpando categorias de pre√ßos...');
        const deletedCategories = await PhotoCategory.deleteMany({});
        console.log(`‚úÖ ${deletedCategories.deletedCount} categorias de pre√ßos removidas`);

        // 8. LIMPAR DESCONTOS
        console.log('üóëÔ∏è Limpando regras de desconto...');
        const deletedDiscounts = await QuantityDiscount.deleteMany({});
        console.log(`‚úÖ ${deletedDiscounts.deletedCount} descontos removidos`);

        // 9. MANTER CONFIGURA√á√ïES DE EMAIL
        console.log('‚úÖ MANTIDO: Configura√ß√µes de Email (para n√£o perder SMTP)');

        // VERIFICAR O QUE FOI MANTIDO
        console.log('\n‚úÖ MANTIDO: Admins (para voc√™ fazer login)');
        console.log('‚úÖ MANTIDO: EmailConfig (configura√ß√µes SMTP)');

        // Contar admins mantidos
        const Admin = require('./src/models/Admin');
        const adminCount = await Admin.countDocuments({});
        console.log(`üìä ${adminCount} admin(s) mantido(s) no sistema`);

        console.log('\nüéâ LIMPEZA CONCLU√çDA COM SUCESSO!');
        console.log('üìä Banco de dados est√° ZERADO (exceto admins)!');

        // Verificar se ainda h√° produtos com reserva (n√£o deveria ter)
        const remainingProducts = await Product.countDocuments({});
        if (remainingProducts > 0) {
            console.log(`‚ö†Ô∏è  ERRO: ${remainingProducts} produtos ainda existem!`);
        } else {
            console.log('‚úÖ Todos os produtos foram limpos');
            console.log('‚úÖ Foto 16482 e todas as outras est√£o livres agora!');
        }

        return { success: true };

    } catch (error) {
        console.error('‚ùå ERRO:', error);
        return { success: false, error: error.message };
    }
}

// EXECUTAR LIMPEZA
async function runCleanup() {
    console.log('üöÄ SUNSHINE COWHIDES - LIMPEZA TOTAL');
    console.log('='.repeat(50));
    console.log('‚ö†Ô∏è  ESTA OPERA√á√ÉO √â IRREVERS√çVEL!');
    console.log('‚úÖ Mant√©m apenas: ADMINS');
    console.log('üóëÔ∏è  Remove: Clientes, Produtos, Carrinhos, Sele√ß√µes,');
    console.log('           Pre√ßos, Descontos, Emails, Photo Status');
    console.log('='.repeat(50));
    console.log('');

    // Conectar ao MongoDB
    if (mongoose.connection.readyState !== 1) {
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('üîó Conectado ao MongoDB\n');
    }

    const result = await cleanupDatabase();

    if (result.success) {
        console.log('\nüìã PR√ìXIMOS PASSOS:');
        console.log('1. ‚úÖ Voc√™ pode fazer login como admin');
        console.log('2. üìù Criar novos clientes de teste');
        console.log('3. üí∞ Reconfigurar pre√ßos se necess√°rio');
        console.log('4. üì∏ Todas as fotos est√£o 100% livres');
        console.log('5. üß™ Sistema pronto para testes limpos');
    }

    // Desconectar
    await mongoose.disconnect();
    console.log('\nüîå Desconectado do MongoDB');

    return result;
}

module.exports = { cleanupDatabase, runCleanup };

// EXECUTAR SE CHAMADO DIRETAMENTE
if (require.main === module) {
    runCleanup().then(() => {
        process.exit(0);
    }).catch(error => {
        console.error('‚ùå Erro fatal:', error);
        process.exit(1);
    });
}