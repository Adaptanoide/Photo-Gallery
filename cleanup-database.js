// SCRIPT DE LIMPEZA DO BANCO DE DADOS
// Manter apenas cliente 6544 e limpar todos os dados de teste
require('dotenv').config();
const mongoose = require('mongoose');
const AccessCode = require('./src/models/AccessCode');
const Selection = require('./src/models/Selection');
const PhotoStatus = require('./src/models/PhotoStatus');
const Cart = require('./src/models/Cart');
async function cleanupDatabase() {
    try {
        console.log('üßπ INICIANDO LIMPEZA COMPLETA...');

        // 1. DELETAR TODOS OS CLIENTES (inclusive 6544)
        console.log('üóëÔ∏è Removendo TODOS os clientes...');
        const deletedClients = await AccessCode.deleteMany({});
        console.log(`‚úÖ ${deletedClients.deletedCount} clientes removidos`);

        // 2. DELETAR TODAS AS SELE√á√ïES  
        console.log('üóëÔ∏è Removendo TODAS as sele√ß√µes...');
        const deletedSelections = await Selection.deleteMany({});
        console.log(`‚úÖ ${deletedSelections.deletedCount} sele√ß√µes removidas`);

        // 3. LIMPAR PHOTO STATUS
        console.log('üóëÔ∏è Removendo photo status...');
        const deletedPhotoStatus = await PhotoStatus.deleteMany({});
        console.log(`‚úÖ ${deletedPhotoStatus.deletedCount} photo status removidos`);

        // 4. LIMPAR TODOS OS CARRINHOS
        console.log('üóëÔ∏è Removendo TODOS os carrinhos...');
        const deletedCarts = await Cart.deleteMany({});
        console.log(`‚úÖ ${deletedCarts.deletedCount} carrinhos removidos`);

        console.log('‚úÖ MANTIDOS: PhotoCategory (pre√ßos), QuantityDiscount, EmailConfig');
        console.log('üéâ LIMPEZA COMPLETA CONCLU√çDA!');

        return { success: true };

    } catch (error) {
        console.error('‚ùå ERRO:', error);
        return { success: false, error: error.message };
    }
}

// EXECUTAR LIMPEZA
async function runCleanup() {
    console.log('üöÄ SCRIPT DE LIMPEZA DO SUNSHINE COWHIDES');
    console.log('‚ö†Ô∏è ATEN√á√ÉO: Esta opera√ß√£o √© IRREVERS√çVEL');
    console.log('üìã Vai deletar TODOS os dados exceto pre√ßos (PhotoCategory)\n');

    // Conectar ao MongoDB se n√£o estiver conectado
    if (mongoose.connection.readyState !== 1) {
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('üîó Conectado ao MongoDB');
    }

    const result = await cleanupDatabase();

    if (result.success) {
        console.log('\nüìà PR√ìXIMOS PASSOS:');
        console.log('1. Verificar dashboard (deve mostrar 0 clientes)');
        console.log('2. Criar novos clientes para testes');
        console.log('3. Testar Special Selections do zero');
        console.log('4. Price Management mantido intacto ‚úÖ');
    }

    return result;
}

module.exports = { cleanupDatabase, runCleanup };

// EXECUTAR SE CHAMADO DIRETAMENTE
if (require.main === module) {
    runCleanup().then(() => {
        process.exit(0);
    }).catch(error => {
        console.error('‚ùå Erro fatal:', error);
        process.exit(1);
    });
}
