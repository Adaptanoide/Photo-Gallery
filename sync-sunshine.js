#!/usr/bin/env node

/**
 * SUNSHINE SYNC - Sistema Unificado de Sincroniza√ß√£o
 * Um √∫nico comando para sincronizar Google Drive ‚Üî R2
 * 
 * Execu√ß√£o: node sync-sunshine.js
 */

require('dotenv').config();
const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Importar m√≥dulos
const DriveService = require('./sync-modules/drive-service');
const R2Service = require('./sync-modules/r2-service');
const DatabaseService = require('./sync-modules/db-service');
const ImageProcessor = require('./sync-modules/image-processor');
const SyncEngine = require('./sync-modules/sync-engine');

class SunshineSync {
    constructor() {
        this.workDir = path.join(__dirname, 'sync-data');
        this.stateFile = path.join(this.workDir, 'state.json');
        this.tempDir = path.join(this.workDir, 'temp');
        this.logsDir = path.join(this.workDir, 'logs');

        this.services = {
            drive: null,
            r2: null,
            db: null,
            processor: null,
            engine: null
        };

        this.state = {
            lastSync: null,
            inProgress: false,
            currentStep: null,
            stats: {
                photosAnalyzed: 0,
                newPhotosFound: 0,
                soldPhotosFound: 0,
                photosDownloaded: 0,
                photosProcessed: 0,
                photosUploaded: 0,
                photosMarkedSold: 0,
                errors: []
            }
        };
    }

    // Criar estrutura de diret√≥rios
    async initWorkspace() {
        const dirs = [this.workDir, this.tempDir, this.logsDir];
        dirs.forEach(dir => {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
            }
        });

        // Carregar estado anterior se existir
        if (fs.existsSync(this.stateFile)) {
            const previousState = JSON.parse(fs.readFileSync(this.stateFile, 'utf8'));
            if (previousState.inProgress) {
                console.log('‚ö†Ô∏è  Sincroniza√ß√£o anterior n√£o foi conclu√≠da.');
                const answer = await this.askUser('Deseja continuar de onde parou? (s/n): ');
                if (answer.toLowerCase() === 's') {
                    this.state = previousState;
                } else {
                    await this.cleanupTemp();
                }
            }
        }
    }

    // Limpar arquivos tempor√°rios
    async cleanupTemp() {
        if (fs.existsSync(this.tempDir)) {
            // Remover recursivamente todo o conte√∫do
            fs.rmSync(this.tempDir, { recursive: true, force: true });
            // Recriar a pasta vazia
            fs.mkdirSync(this.tempDir, { recursive: true });
        }
        this.state.inProgress = false;
        this.saveState();
    }

    // Salvar estado
    saveState() {
        fs.writeFileSync(this.stateFile, JSON.stringify(this.state, null, 2));
    }

    // Perguntar ao usu√°rio
    askUser(question) {
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        return new Promise(resolve => {
            rl.question(question, answer => {
                rl.close();
                resolve(answer);
            });
        });
    }

    // Inicializar servi√ßos
    async initServices() {
        console.log('\nüîß Inicializando servi√ßos...');

        try {
            // Inicializar cada servi√ßo
            this.services.drive = new DriveService();
            await this.services.drive.init();
            console.log('  ‚úÖ Google Drive conectado');

            this.services.r2 = new R2Service();
            await this.services.r2.init();
            console.log('  ‚úÖ Cloudflare R2 conectado');

            this.services.db = new DatabaseService();
            await this.services.db.connect();
            console.log('  ‚úÖ MongoDB conectado');

            this.services.processor = new ImageProcessor(this.tempDir);
            console.log('  ‚úÖ Processador de imagens pronto');

            this.services.engine = new SyncEngine(this.services, this.state);
            console.log('  ‚úÖ Motor de sincroniza√ß√£o pronto');

            return true;
        } catch (error) {
            console.error('‚ùå Erro ao inicializar:', error.message);
            return false;
        }
    }

    // Mostrar cabe√ßalho
    showHeader() {
        console.clear();
        console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
        console.log('‚ïë         üåü SUNSHINE COWHIDES - SINCRONIZA√á√ÉO üåü           ‚ïë');
        console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
        console.log(`üìÖ Data: ${new Date().toLocaleString('pt-BR')}`);
        if (this.state.lastSync) {
            console.log(`üïê √öltima sync: ${new Date(this.state.lastSync).toLocaleString('pt-BR')}`);
        }
        console.log('');
    }

    // Executar an√°lise
    async runAnalysis() {
        this.state.currentStep = 'analysis';
        this.state.inProgress = true;
        this.saveState();

        console.log('\nüìä FASE 1: AN√ÅLISE\n');
        console.log('Comparando Google Drive com R2...');

        const startTime = Date.now();
        const analysis = await this.services.engine.analyze();
        const elapsed = ((Date.now() - startTime) / 1000).toFixed(1);

        // Atualizar estat√≠sticas
        this.state.stats.photosAnalyzed = analysis.totalPhotos;
        this.state.stats.newPhotosFound = analysis.newPhotos.length;
        this.state.stats.soldPhotosFound = analysis.soldPhotos.length;
        this.saveState();

        // Mostrar resultado
        console.log('\n' + '‚îÄ'.repeat(50));
        console.log('üìà RESULTADO DA AN√ÅLISE:');
        console.log('‚îÄ'.repeat(50));
        console.log(`üì∏ Total no Drive: ${analysis.driveCount} fotos`);
        console.log(`‚òÅÔ∏è  Total no R2: ${analysis.r2Count} fotos`);
        console.log(`üü¢ Fotos NOVAS para upload: ${analysis.newPhotos.length}`);
        console.log(`üî¥ Fotos VENDIDAS para marcar: ${analysis.soldPhotos.length}`);
        console.log(`‚ö™ Vendidas anteriormente (ignoradas): ${analysis.previouslySold || 0}`);
        console.log(`‚ö° Tempo de an√°lise: ${elapsed}s`);
        console.log('‚îÄ'.repeat(50));

        return analysis;
    }

    // Processar fotos vendidas
    async processSoldPhotos(soldPhotos) {
        if (soldPhotos.length === 0) {
            console.log('\n‚úÖ Nenhuma foto vendida para processar');
            return;
        }

        this.state.currentStep = 'marking_sold';
        this.saveState();

        console.log('\nüî¥ FASE 2: MARCAR FOTOS VENDIDAS\n');
        console.log(`Marcando ${soldPhotos.length} fotos como vendidas...`);

        // Mostrar primeiras 5
        console.log('\nPrimeiras fotos:');
        soldPhotos.slice(0, 5).forEach(photo => {
            console.log(`  - ${photo.number} (${photo.category})`);
        });
        if (soldPhotos.length > 5) {
            console.log(`  ... e mais ${soldPhotos.length - 5} fotos`);
        }

        const confirm = await this.askUser('\nConfirmar marca√ß√£o como vendidas? (s/n): ');
        if (confirm.toLowerCase() !== 's') {
            console.log('‚ö†Ô∏è  Marca√ß√£o cancelada');
            return;
        }

        const startTime = Date.now();
        let marked = 0;
        let errors = 0;

        for (const photo of soldPhotos) {
            try {
                await this.services.db.markPhotoAsSold(photo.number);
                marked++;

                // Mostrar progresso a cada 50
                if (marked % 50 === 0) {
                    console.log(`  ‚úì ${marked}/${soldPhotos.length} marcadas...`);
                }
            } catch (error) {
                errors++;
                this.state.stats.errors.push({
                    photo: photo.number,
                    error: error.message
                });
            }
        }

        const elapsed = ((Date.now() - startTime) / 1000).toFixed(1);

        this.state.stats.photosMarkedSold = marked;
        this.saveState();

        console.log(`\n‚úÖ ${marked} fotos marcadas como vendidas em ${elapsed}s`);
        if (errors > 0) {
            console.log(`‚ö†Ô∏è  ${errors} erros durante marca√ß√£o`);
        }
    }

    // Processar fotos novas
    async processNewPhotos(newPhotos) {
        if (newPhotos.length === 0) {
            console.log('\n‚úÖ Nenhuma foto nova para processar');
            return;
        }

        console.log('\nüü¢ FASE 3: PROCESSAR FOTOS NOVAS\n');
        console.log(`${newPhotos.length} fotos novas encontradas`);

        const estimatedTime = (newPhotos.length * 0.5); // ~30s por foto
        console.log(`‚è±Ô∏è  Tempo estimado: ${Math.ceil(estimatedTime)} minutos`);

        const confirm = await this.askUser('\nIniciar processamento? (s/n): ');
        if (confirm.toLowerCase() !== 's') {
            console.log('‚ö†Ô∏è  Processamento cancelado');
            return;
        }

        // 3.1 - Download
        this.state.currentStep = 'downloading';
        this.saveState();
        console.log('\nüì• Baixando fotos do Drive...');

        const downloaded = await this.services.engine.downloadPhotos(newPhotos);
        this.state.stats.photosDownloaded = downloaded.length;
        this.saveState();

        console.log(`‚úÖ ${downloaded.length} fotos baixadas`);

        // 3.2 - Processar (4 vers√µes)
        this.state.currentStep = 'processing';
        this.saveState();
        console.log('\nüñºÔ∏è  Processando imagens (4 vers√µes)...');

        const processed = await this.services.engine.processPhotos(downloaded);
        this.state.stats.photosProcessed = processed.length;
        this.saveState();

        console.log(`‚úÖ ${processed.length} fotos processadas`);

        // 3.3 - Upload para R2
        this.state.currentStep = 'uploading';
        this.saveState();
        console.log('\n‚òÅÔ∏è  Enviando para R2...');

        const uploaded = await this.services.engine.uploadPhotos(processed);
        this.state.stats.photosUploaded = uploaded.length;
        this.saveState();

        console.log(`‚úÖ ${uploaded.length} fotos enviadas`);

        // 3.4 - Atualizar banco
        this.state.currentStep = 'updating_db';
        this.saveState();
        console.log('\nüíæ Atualizando banco de dados...');

        await this.services.engine.updateDatabase(uploaded);
        console.log('‚úÖ Banco de dados atualizado');
    }

    // Gerar relat√≥rio final
    generateReport() {
        const duration = this.state.startTime ?
            ((Date.now() - this.state.startTime) / 1000 / 60).toFixed(1) : 0;

        console.log('\n' + '‚ïê'.repeat(60));
        console.log('üìä RELAT√ìRIO FINAL');
        console.log('‚ïê'.repeat(60));
        console.log(`üìÖ Data: ${new Date().toLocaleString('pt-BR')}`);
        console.log(`‚è±Ô∏è  Dura√ß√£o total: ${duration} minutos`);
        console.log('\nRESULTADOS:');
        console.log(`  üì∏ Fotos analisadas: ${this.state.stats.photosAnalyzed}`);
        console.log(`  üü¢ Novas encontradas: ${this.state.stats.newPhotosFound}`);
        console.log(`  üî¥ Vendidas encontradas: ${this.state.stats.soldPhotosFound}`);

        if (this.state.stats.photosDownloaded > 0) {
            console.log('\nPROCESSAMENTO:');
            console.log(`  üì• Baixadas: ${this.state.stats.photosDownloaded}`);
            console.log(`  üñºÔ∏è  Processadas: ${this.state.stats.photosProcessed}`);
            console.log(`  ‚òÅÔ∏è  Enviadas: ${this.state.stats.photosUploaded}`);
        }

        if (this.state.stats.photosMarkedSold > 0) {
            console.log(`  üí∞ Marcadas como vendidas: ${this.state.stats.photosMarkedSold}`);
        }

        if (this.state.stats.errors.length > 0) {
            console.log(`\n‚ö†Ô∏è  ERROS: ${this.state.stats.errors.length}`);
            this.state.stats.errors.slice(0, 5).forEach(err => {
                console.log(`  - ${err.photo}: ${err.error}`);
            });
        }

        console.log('‚ïê'.repeat(60));
        console.log('‚úÖ SINCRONIZA√á√ÉO COMPLETA!\n');

        // Salvar log completo
        const logFile = path.join(
            this.logsDir,
            `sync-${new Date().toISOString().split('T')[0]}.json`
        );
        fs.writeFileSync(logFile, JSON.stringify(this.state, null, 2));
        console.log(`üìÑ Log salvo em: ${logFile}\n`);
    }

    // Executar sincroniza√ß√£o completa
    async run() {
        try {
            this.showHeader();

            // Inicializar
            await this.initWorkspace();

            // Conectar servi√ßos
            const servicesOk = await this.initServices();
            if (!servicesOk) {
                console.error('‚ùå Falha ao inicializar servi√ßos');
                process.exit(1);
            }

            // Marcar in√≠cio
            this.state.startTime = Date.now();

            // 1. An√°lise
            const analysis = await this.runAnalysis();

            // Verificar se h√° trabalho a fazer
            if (analysis.newPhotos.length === 0 && analysis.soldPhotos.length === 0) {
                console.log('\n‚úÖ Sistema j√° est√° sincronizado!');
                console.log('   Nada para fazer.\n');
                await this.cleanup();
                return;
            }

            // 2. Processar vendidas (r√°pido)
            await this.processSoldPhotos(analysis.soldPhotos);

            // 3. Processar novas (demorado)
            await this.processNewPhotos(analysis.newPhotos);

            // 4. Relat√≥rio final
            this.generateReport();

            // 5. Limpar e finalizar
            await this.cleanup();

        } catch (error) {
            console.error('\n‚ùå ERRO FATAL:', error);
            console.error(error.stack);
            this.state.stats.errors.push({
                fatal: true,
                error: error.message
            });
            this.saveState();
            process.exit(1);
        }
    }

    // Limpar e desconectar
    async cleanup() {
        console.log('üßπ Limpando...');

        // Limpar tempor√°rios
        await this.cleanupTemp();

        // Desconectar servi√ßos
        if (this.services.db) {
            await this.services.db.disconnect();
        }

        // Marcar como conclu√≠do
        this.state.inProgress = false;
        this.state.lastSync = new Date();
        this.state.currentStep = 'completed';
        this.saveState();

        console.log('‚úÖ Pronto!\n');
    }
}

// ========================================
// EXECUTAR
// ========================================
if (require.main === module) {
    console.log('üåü SUNSHINE SYNC - Iniciando...\n');

    const sync = new SunshineSync();

    // Capturar CTRL+C
    process.on('SIGINT', async () => {
        console.log('\n\n‚ö†Ô∏è  Interrompido pelo usu√°rio');
        await sync.cleanup();
        process.exit(0);
    });

    // Executar
    sync.run();
}