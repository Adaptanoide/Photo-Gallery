// scripts/pricing/corrigir-faltantes.js
require('dotenv').config();
const mongoose = require('mongoose');
const PhotoCategory = require('../../src/models/PhotoCategory');

async function corrigirFaltantes() {
    console.log('üîß CORRE√á√ÉO DE CATEGORIAS FALTANTES\n');
    
    await mongoose.connect(process.env.MONGODB_URI);
    
    const corre√ß√µes = [
        {
            nome: 'Black and White Reddish XL',
            pre√ßo: 159,
            motivo: 'Mesmo pre√ßo de Black & White XL'
        }
        // As outras 2 s√£o pastas vazias, n√£o precisam de pre√ßo agora
    ];
    
    for (const item of corre√ß√µes) {
        const categoria = await PhotoCategory.findOne({
            displayName: { $regex: item.nome, $options: 'i' }
        });
        
        if (categoria && !categoria.basePrice) {
            categoria.basePrice = item.pre√ßo;
            categoria.pricingMode = 'base';
            
            if (!categoria.priceHistory) categoria.priceHistory = [];
            categoria.priceHistory.push({
                oldPrice: 0,
                newPrice: item.pre√ßo,
                changedBy: 'corre√ß√£o-manual',
                changedAt: new Date(),
                reason: item.motivo
            });
            
            await categoria.save();
            console.log(`‚úÖ ${item.nome}: $${item.pre√ßo}`);
        }
    }
    
    // Verificar status final
    const total = await PhotoCategory.countDocuments({ isActive: true });
    const comPre√ßo = await PhotoCategory.countDocuments({ 
        isActive: true,
        basePrice: { $gt: 0 }
    });
    
    console.log(`\nüìä STATUS FINAL:`);
    console.log(`   Total: ${total}`);
    console.log(`   Com pre√ßo: ${comPre√ßo}`);
    console.log(`   Sem pre√ßo: ${total - comPre√ßo}`);
    console.log(`   Porcentagem: ${((comPre√ßo/total)*100).toFixed(1)}%`);
    
    mongoose.connection.close();
}

corrigirFaltantes().catch(console.error);